url: https://blog.csdn.net/Burgess_zheng/article/details/86762248

1 创建型模式
    社会化的分工越来越细，自然在软件设计方面也是如此，因此对象的创建和对象的使用分开也就成为了必然趋势。因为对象的创建会消耗掉系统的很多资源，所以单独对对象的创建进行研究，从而能够高效地创建对象就是创建型模式要探讨的问题。这里有6个具体的创建型模式可供研究，它们分别是：
    1. 简单工厂模式（Simple Factory）
    2. 工厂方法模式（Factory Method）
    3. 抽象工厂模式（Abstract Factory）
    4. 创建者模式（Builder）
    5. 原型模式（Prototype）
    6. 单例模式（Singleton）

2 结构型模式
    在解决了对象的创建问题之后，对象的组成以及对象之间的依赖关系就成了开发人员关注的焦点，因为如何设计对象的结构、继承和依赖关系会影响到后续程序的维护性、代码的健壮性、耦合性等。对象结构的设计很容易体现出设计人员水平的高低，这里有7个具体的结构型模式可供研究，它们分别是：
    7. 适配器模式（Adapter）
    8. 代理模式（Proxy）
    9. 装饰模式（Decorator）
    10. 桥模式（Bridge、多维度）
    11. 组合模式（Composite）
    12. 外观模式
    13. 享元模式（Flyweight）

3 行为型模式
    在对象的结构和对象的创建问题都解决了之后，就剩下对象的行为问题了，如果对象的行为设计的好，那么对象的行为就会更清晰，它们之间的协作效率就会提高，这里有11个具体的行为型模式可供研究，它们分别是：
    14. 观察者模式（Observer）  #典型的发布订阅
    15. 状态模式（State）
    16. 策略模式（Strategy）
    17. 职责链模式（Chain of Responsibility
    18. 命令模式（Command）
    19. 访问者模式（Visitor）
    20. 调停者模式（Mediator）
    21. 备忘录模式（Memento） #如：虚拟机快照  #没讲（克隆：深copy、快照：浅copy）
    22. 迭代器模式（Iterator）
    23. 解释器模式（Interpreter）
    24. 模板方法（Template Method）

